{"mappings":";;;;;;;;;;;;ACKe;IACb,AAAO,KAAK,GAA8B,EAAE,CAAC;IAE7C,OAAgB,KAAK,GAAW,GAAG,CAAC;IAEpC,yEAAyE;IACzE,+BAA+B;IAC/B,mCAAmC;IACnC,uCAAuC;IACvC,cAAc;IACd,AAAO,aAAa,CAAC,CAAS,EAAY;QACxC,MAAM,MAAM,GAAG,EAAE,AAAC;QAClB,IAAI,KAAK,GAAG,wCAAK,CAAC,KAAK,AAAC;QAExB,MAAO,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE;YACzB,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,AAAC;YAElB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EACZ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;iBAE1B,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAG3B,KAAK,IAAI,CAAC,CAAC;YACX,CAAC,EAAE,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAChB;QAED,OAAO,MAAM,CAAC;KACf;IAED,AAAO,aAAa,GAAW;QAC7B,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,GAAK;YACnD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,AAAC;YACzC,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC;SACjD,EAAE,CAAC,CAAC,CAAC;KACP;IAED,AAAO,YAAY,CAAC,KAAc,EAAW;QAC3C,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,AAAC;QAC9C,OAAO,IAAI,CAAC,aAAa,EAAE,GAAI,CAAA,KAAK,IAAI,CAAC,CAAA,IAAK,wCAAK,CAAC,KAAK,CAAC;KAC3D;IAED,AAAO,UAAU,GAAY;QAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;KAC7C;CACF;;ADnDD;AEAA;AEkBA,MAAM,iCAAW,GAAQ;IACvB,MAAM,EAAE;QACN,SAAS,EAAE,cAAc;QACzB,UAAU,EAAE,CAAC,KAAK,GAAK,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO;QAC/C,IAAI,EAAE;YAAE,KAAK,EAAE,WAAW;YAAE,MAAM,EAAE,UAAU;SAAE;KACjD;IACD,OAAO,EAAE;QACP,SAAS,EAAE,aAAa;QACxB,UAAU,EAAE,CAAC,KAAK,GAAK,KAAK,CAAC,OAAO;QACpC,IAAI,EAAE;YAAE,KAAK,EAAE,WAAW;YAAE,MAAM,EAAE,SAAS;SAAE;KAChD;CACF,AAAC;AAEK,MAAM,yCAAkB;IAC7B,YAAY,IAAU,CAAE;QACtB,MAAM,QAAQ,GACZ,OAAO,MAAM,CAAC,WAAW,KAAK,WAAW,GAAG,QAAQ,GAAG,SAAS,AAAC;QAEnE,IAAI,CAAC,UAAU,GAAG,iCAAW,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;IAED,AAAO,kBAAkB,CACvB,YAAiE,EAC3D;QACN,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,GAAK;YACvD,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,YAAY,WAAW,AAAC;YAC1D,MAAM,QAAQ,GACZ,aAAa,IACb,AAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAClC,OAAO,EAAE,MAAM,KAAK,QAAQ,AAAC;YAEnC,IAAI,CAAC,QAAQ,EACX,OAAO;YAGT,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,AAAC;YAE1B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,AAAC;YAEnD,MAAM,aAAa,GACjB,UAAU,EAAE,gBAAgB,IAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,AAAC;YACnE,MAAM,aAAa,GACjB,UAAU,EAAE,YAAY,IACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,AAAC;YAE/D,IAAI,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,SAAS,EAAE;gBAC9D,OAAO,CAAC,KAAK,CACX,2DAA2D,CAC5D,CAAC;gBACF,OAAO;aACR;YAED,MAAM,cAAc,GAAG,aAAa,KAAK,GAAG,IAAI,aAAa,KAAK,GAAG,AAAC;YAEtE,MAAM,MAAM,GAA2C;uBACrD,KAAK;8BACL,YAAY;gBACZ,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,AAAC;YAEF,IAAI,cAAc,EAAE;gBAClB,MAAM,GAAG,8CAAwB,CAAC;oBAChC,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;oBAC1B,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;iBACvB,CAAC,CAAC;gBACH,qCAAe,CAAC;oBAAE,GAAG,MAAM;4BAAE,MAAM;iBAAE,CAAC,CAAC;aACxC,MACC,qCAAe,CAAC;gBAAE,GAAG,MAAM;wBAAE,MAAM;aAAE,CAAC,CAAC;SAE1C,CAAC;KACH;CAKF;AAUD,SAAS,qCAAe,CAAC,MAA8B,EAAQ;IAC7D,MAAM,SAAE,KAAK,CAAA,QAAE,IAAI,CAAA,cAAE,UAAU,CAAA,gBAAE,YAAY,CAAA,EAAE,GAAG,MAAM,AAAC;IAEzD,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,AAAC;IAE3B,IAAI,KAAK,CAAC,UAAU,EAClB,KAAK,CAAC,cAAc,EAAE,CAAC;IAGzB,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GACzC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAY,CAAC,KAAK,GACzD,GAAG,AAAC;IACR,MAAM,gBAAgB,GAAG,UAAU,CAAC,cAAc,IAAI,EAAE,CAAC,AAAC;IAC1D,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CACnC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CACxC,AAAC;IAEF,MAAM,qBAAqB,GAAG,kBAAkB,KAAK,GAAG,AAAC;IACzD,MAAM,MAAM,GACV,UAAU,CAAC,UAAU,CAAC,KAAK,CAA4B,GACvD,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,AAAC;IAEtC,MAAM,MAAM,GAAG,CAAC,KAA8B,GAAK;QACjD,IAAI,OAAO,GACT,UAAU,CAAC,UAAU,CAAC,KAAK,CAA4B,GACvD,MAAM,GACN,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,AAAC;QAE3C,MAAM,oBAAoB,GAAG,IAAM;YACjC,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,gBAAgB,AAAC;YACjE,MAAM,cAAc,GAAG,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,AAAC;YACrE,MAAM,aAAa,GAAG,cAAc,KAAK,IAAI,AAAC;YAE9C,IAAI,CAAC,aAAa,EAAE;gBAClB,MAAM,UAAU,GAAG,cAAc,IAAI,cAAc,CAAC,MAAM,AAAC;gBAC3D,MAAM,cAAc,GAClB,AAAC,UAAU,IACT,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,IACtD,CAAC,AAAC;gBAEJ,IAAI,OAAO,GAAG,cAAc,EAAE;oBAC5B,OAAO,GAAG,cAAc,CAAC;oBACzB,MAAM,GAAG,oDAA8B,CAAC;wBACtC,MAAM,EAAE,MAAM;wBACd,OAAO,EAAE,IAAI,CAAC,OAAO;wBACrB,KAAK,EAAE,IAAI,CAAC,KAAK;qBAClB,CAAC,CAAC;oBACH,OAAO;iBACR;aACF;YAED,IAAI,OAAO,GAAG,CAAC,EACb,OAAO,GAAG,CAAC,CAAC;SAEf,AAAC;QAEF,MAAM,qBAAqB,GAAG,IAAM;YAClC,IAAI,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,AAAC;YAC9C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,AAAC;YACtD,OAAO,IAAI,MAAM,CAAC;YAElB,IAAI,qBAAqB,EAAE;gBACzB,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,AAAC;gBAC3C,eAAe,GACb,AAAC,WAAW,IAAI,AAAC,WAAW,CAAiB,WAAW,IACxD,eAAe,CAAC;gBAClB,MAAM,GACJ,AAAC,WAAW,IACV,AAAC,WAAW,CAAiB,qBAAqB,EAAE,CAAC,IAAI,IAC3D,MAAM,CAAC;aACV;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,YAAY,AAAC;YACzD,MAAM,cAAc,GAAG,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,AAAC;YACnE,MAAM,UAAU,GAAG,cAAc,KAAK,IAAI,AAAC;YAE3C,IAAI,CAAC,UAAU,IAAI,cAAc,EAAE;gBACjC,MAAM,UAAU,GAAG,cAAc,CAAC,MAAM,AAAC;gBACzC,MAAM,cAAc,GAAG,UAAU,CAC/B,gBAAgB,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,GAAG,CACzC,AAAC;gBAEF,IAAI,OAAO,GAAG,cAAc,GAAG,MAAM,EAAE;oBACrC,OAAO,GAAG,cAAc,CAAC;oBACzB,MAAM,GAAG,qDAA+B,CAAC;wBACvC,MAAM,EAAE,MAAM;wBACd,OAAO,EAAE,IAAI,CAAC,OAAO;wBACrB,KAAK,EAAE,IAAI,CAAC,KAAK;qBAClB,CAAC,CAAC;oBACH,OAAO;iBACR;aACF;YAED,OAAO,IAAI,MAAM,CAAC;YAElB,MAAM,SAAS,GAAG,eAAe,AAAC;YAClC,IAAI,OAAO,GAAG,SAAS,EACrB,OAAO,GAAG,SAAS,CAAC;SAEvB,AAAC;QAEF,oBAAoB,EAAE,CAAC;QACvB,qBAAqB,EAAE,CAAC;QAExB,MAAM,WAAW,GAAG,UAAU,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,AAAC;QACrE,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,AAAC;QACpE,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,AAAC;QAExE,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAE3C,YAAY,CAAC,MAAM,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;KAC1D,AAAC;IAEF,MAAM,SAAS,GAAG,IAAM;QACtB,QAAQ,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAChE,QAAQ,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KAC7D,AAAC;IAEF,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACzD,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;CAC9D;AAQD,SAAS,8CAAwB,CAAC,UAChC,MAAM,CAAA,WACN,OAAO,CAAA,SACP,KAAK,CAAA,EACiB,EAAe;IACrC,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CACtD,CAAC,CAAC,cAAc,EAAE,oBAAE,gBAAgB,CAAA,gBAAE,YAAY,CAAA,EAAE,CAAC,GAAK;QACxD,MAAM,kBAAkB,GAAG,cAAc,KAAK,MAAM,AAAC;QAErD,MAAM,OAAO,GAAG,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,AAAC;QAC3D,MAAM,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,AAAC;QAEvD,MAAM,cAAc,GAAG,OAAO,KAAK,GAAG,IAAI,OAAO,KAAK,GAAG,AAAC;QAE1D,OAAO,kBAAkB,IAAI,cAAc,CAAC;KAC7C,CACF,AAAC;IAEF,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;CAC5D;AAED,SAAS,qDAA+B,CAAC,UACvC,MAAM,CAAA,WACN,OAAO,CAAA,SACP,KAAK,CAAA,EACiB,EAAe;IACrC,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,AAAC;IAEvC,MAAM,iBAAiB,GACrB,UAAU,EAAE,YAAY,IAAI,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,IAAI,AAAC;IAElE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CACtD,CAAC,CAAC,CAAC,EAAE,gBAAE,YAAY,CAAA,EAAE,CAAC,GAAK;QACzB,OAAO,KAAK,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,IAAI,KAAK,iBAAiB,CAAC;KACzE,CACF,AAAC;IAEF,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;CAC5D;AAED,SAAS,oDAA8B,CAAC,UACtC,MAAM,CAAA,WACN,OAAO,CAAA,SACP,KAAK,CAAA,EACiB,EAAe;IACrC,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,AAAC;IAEvC,MAAM,iBAAiB,GACrB,UAAU,EAAE,gBAAgB,IAAI,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,IAAI,AAAC;IAE1E,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CACtD,CAAC,CAAC,CAAC,EAAE,oBAAE,gBAAgB,CAAA,EAAE,CAAC,GAAK;QAC7B,OAAO,KAAK,CAAC,gBAAgB,CAAC,CAAC,YAAY,EAAE,IAAI,KAAK,iBAAiB,CAAC;KACzE,CACF,AAAC;IAEF,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;CAC5D;IAED,wCAAkC,GAAnB,yCAAkB;;ADtSjC;;AAuBe;IACb,YAAmB,IAAiB,CAAE;QACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA,GAAA,yCAAkB,CAAA,CAAC,IAAI,CAAC,CAAC;QAEnD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACpC;IAQD,AAAO,qBAAqB,CAAC,MAAmB,EAAQ;QACtD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC7B;IAED,AAAO,UAAU,CAAC,IAAY,EAAE,KAAa,EAAe;QAC1D,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,AAAC;QAE3C,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;QAE9B,OAAO,IAAI,CAAC;KACb;IAED,AAAO,YAAY,GAAgB;QACjC,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,AAAC;QAE7C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,CAAC,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAE7C,OAAO,MAAM,CAAC;KACf;IAED,AAAO,aAAa,CAAC,EAAe,EAAQ;QAC1C,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACtD;IAED,AAAO,YAAY,CAAC,IAAY,EAAE,KAAa,EAAQ;QACrD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KACjE;IAED,AAAO,eAAe,GAAW;QAC/B,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAC9C,CAAC,QAAQ,GAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,YAAY,KAAK,IAAI,EACxD,IAAI,CACL,AAAC;QAEF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EACxB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAG7D,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;KACrB;IAED,AAAO,aAAa,CAAC,MAAmB,EAAU;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,AAAC;QAE5C,IAAI,CAAC,UAAU,EACb,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QAGtD,OAAO,UAAU,CAAC;KACnB;IAED,AAAO,qBAAqB,CAAC,IAAY,EAAU;QACjD,MAAM,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,AAAC;QAC9D,OAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;KACnD;IAED,AAAO,gBAAgB,CAAC,KAAa,EAAU;QAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,AAAC;QAC7C,OAAO,AAAC,KAAK,GAAG,GAAG,GAAI,YAAY,CAAC;KACrC;IAED,AAAO,0BAA0B,CAAC,IAAY,EAAiB;QAC7D,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAC9C,CAAC,CAAC,GAAK,CAAC,CAAC,YAAY,KAAK,IAAI,CAC/B,AAAC;QAEF,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;KACrB;IAED,AAAO,4BAA4B,CAAC,IAAY,EAAiB;QAC/D,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAC9C,CAAC,CAAC,GAAK,CAAC,CAAC,gBAAgB,KAAK,IAAI,CACnC,AAAC;QAEF,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;KACrB;IAED,AAAO,kBAAkB,CACvB,YAAiE,EAC3D;QACN,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;KACtD;IAED,AAAQ,YAAY,GAAgB;QAClC,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,AAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,GAAG,wCAAI,CAAC,QAAQ,CAAC,CAAC;QACvD,wCAAI,CAAC,QAAQ,GAAG,wCAAI,CAAC,QAAQ,EAAE,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAED,OAAc,QAAQ,GAAW,CAAC,CAAC;IAEnC,OAAc,cAAc,GAAW;QACrC,IAAI,OAAO,GAAG,kBAAkB,AAAC;QACjC,IAAI,KAAK,GAAG,GAAG,AAAC;QAChB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CACxB,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAEnD,OAAO,KAAK,CAAC;KACd;IAED,OAAc,aAAa,CAAC,EAAe,EAAQ;QACjD,IAAI,CAAC,EAAE,CAAC,UAAU,EAChB,OAAO;QAGT,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;KAC/B;CACF;;;AD3Hc;IACb,YAA2B,KAAY,EAAU,IAAU,CAAE;aAAlC,KAAY,GAAZ,KAAY;aAAU,IAAU,GAAV,IAAU;QACzD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,0BAA0B,EAAE,CAAC;KACnC;IAED,AAAO,gBAAgB,CAAC,MAA8B,EAAc;QAClE,MAAM,QAAE,IAAI,CAAA,SAAE,KAAK,CAAA,YAAE,QAAQ,CAAA,SAAE,KAAK,CAAA,EAAE,GAAG,MAAM,AAAC;QAEhD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,AAAC;QAC/C,MAAM,QAAQ,GAAa;YACzB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,QAAQ;YAClB,YAAY,EAAE,IAAI;YAClB,gBAAgB,EAAE,IAAI;SACvB,AAAC;QAEF,MAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACb,AAAC;QAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEpC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;QAEnC,QAAQ,CAAC,KAAK,EAAE;YAAE,IAAI,EAAE,KAAK,KAAK,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK;SAAE,CAAC,CAAC;QAEjD,OAAO;kBACL,IAAI;YACJ,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACb,CAAC;KACH;IAED,AAAO,oBAAoB,CAAC,MAA8B,EAAkB;QAC1E,MAAM,QAAE,IAAI,CAAA,SAAE,KAAK,CAAA,YAAE,QAAQ,CAAA,SAAE,KAAK,CAAA,EAAE,GAAG,MAAM,AAAC;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,AAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,AAAC;QAE7C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;YACvB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACb,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;YACtB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,QAAQ;YAClB,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC3C,YAAY,EAAE,IAAI;SACnB,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE/D,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,AAAC;QACxC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE;YAC5B,MAAM,EAAE,MAAM;YACd,gBAAgB,EAAE,QAAQ;YAC1B,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,OAAO;kBAAE,IAAI;kBAAE,IAAI;oBAAE,MAAM;SAAE,CAAC;KAC/B;IAED,AAAO,WAAW,CAAC,MAAgC,EAAS;QAC1D,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,AAAC;QACpD,MAAM,oBAAoB,GAAG,MAAM,CAChC,KAAK,CAAC,CAAC,CAAC,CACR,GAAG,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,AAAC;QAExC,OAAO;YAAC,UAAU;eAAK,oBAAoB;SAAC,CAAC;KAC9C;IAED,AAAO,0BAA0B,GAAS;QACxC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,AAAC;QAC5C,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,AAAC;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,AAAC;QAE/C,KAAK,CAAC,OAAO,CAAC,SAA4B,IAAI,EAAE,KAAK,EAAE;YACrD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,AAAC;YAChD,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAAE,IAAI,EAAE,IAAI;aAAE,CAAC,CAAC;YAEvC,MAAM,SAAS,GAAG,KAAK,CACpB,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CACnB,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,GAAK,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,AAAC;YACxC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SACzC,EAAE,IAAI,CAAC,CAAC;QAET,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAA4B,UAAkB,EAAE;YACxE,MAAM,iBAAiB,GAAG;gBACxB,MAAM,EAAE,UAAU,CAAC,MAAM;gBACzB,IAAI,EAAE,UAAU,CAAC,YAAY;aAC9B,AAAC;YAEF,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;SAC9C,EAAE,IAAI,CAAC,CAAC;KACV;IAED,AAAO,yBAAyB,CAAC,KAAa,EAAE,GAAmB,EAAQ;QACzE,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,GAAK;YACtE,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;SAC3C,EAAE,CAAC,CAAC,AAAC;QAEN,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC3C;IAED,AAAO,gBAAgB,CAAC,KAAY,EAAQ;QAC1C,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,AAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAsB,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,GAAK;YAChE,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,AAAC;YAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,AAAC;YAC/C,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,IAAI,UAAU,CAAC,IAAI,AAAC;YACzD,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,AAAC;YAEhE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,aAAa,CAAC,CAAC;YACxD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAElC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC3C,CAAC,CAAC;KACJ;IAED,AAAO,6BAA6B,CAAC,GAAmB,EAAQ;QAC9D,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACnC;IAED,AAAO,+BAA+B,CAAC,GAAmB,EAAQ;QAChE,MAAM,UAAU,GAAG,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,AAAC;QAC5D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE;YAAE,IAAI,EAAE,IAAI;SAAE,CAAC,CAAC;KAChE;IAED,AAAO,wCAAwC,CAAC,GAAmB,EAAQ;QACzE,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,gBAAgB,AAAC;QAChE,MAAM,aAAa,GACjB,AAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,IAAK,CAAC,AAAC;QAEnE,MAAM,gBAAgB,GAAG,aAAa,GAAG,CAAC,AAAC;QAC3C,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,AAAC;QACtD,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,AAAC;QAEjD,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,EACnC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAC3B,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,YAAY,GAAG,GAAG,CAAC;QAGxE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;QAEhD,IAAI,YAAY,EACd,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,gBAAgB,CAAC;QAG/D,IAAI,CAAC,yBAAyB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAElD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACjD,YAAY,IACV,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;KACjE;IAED,AAAO,0BAA0B,GAAS;QACxC,MAAM,YAAY,GAAG,CACnB,MAAmB,EACnB,aAAqB,EACrB,aAAqB,GAClB;YACH,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,AAAC;YAEnD,MAAM,YAAY,GAAG,UAAU,CAAC,gBAAgB,AAAC;YACjD,MAAM,QAAQ,GAAG,UAAU,CAAC,YAAY,AAAC;YAEzC,OAAO;YACP,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YAEpD,QAAQ;YACR,MAAM,IAAI,GAAG,aAAa,GAAG,aAAa,AAAC;YAC3C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;YAC7C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;YAEzC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,AAAC;YAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,AAAC;YAEtD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;YACnD,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;SAC9C,AAAC;QAEF,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;KAC5C;IAED,AAAO,UAAU,CAAC,IAAY,EAAE,QAAoB,EAAQ;QAC1D,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC;QACjD,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC;QAE/C,IAAI,CAAC,iBAAiB,IAAI,CAAC,gBAAgB,EAAE;YAC3C,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC;YAC5C,OAAO;SACR;QAED,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,AAAC;QAEhE,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;YAE9B,CAAA,GAAA,wCAAI,CAAA,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAE1C,QAAQ,EAAE,CAAC;YAEX,OAAO;SACR;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,IAAI,AAAC;QAExD,IAAI,UAAU,EAAE;YACd,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,AAAC;YAC9D,MAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,AAAC;YACnC,MAAM,YAAY,GAAG,UAAU,IAAI,UAAU,CAAC,gBAAgB,AAAC;YAC/D,MAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,AAAC;YAExC,IAAI,CAAC,YAAY,EACf,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YAGjE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;YAClD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC;YAEhD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,CAAC,CAAC;YAClD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,CACpC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,EACpC;gBAAE,IAAI,EAAE,IAAI;aAAE,CACf,CAAC;YAEF,IAAI,UAAU,EAAE;gBACd,CAAA,GAAA,wCAAI,CAAA,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACtC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aACpD;YAED,CAAA,GAAA,wCAAI,CAAA,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAEzB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE7B,QAAQ,EAAE,CAAC;YAEX,OAAO;SACR;QAED,eAAe;QACf,MAAM,WAAU,GAAG,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,AAAC;QAChE,MAAM,YAAY,GAAG,WAAU,IAAI,WAAU,CAAC,YAAY,AAAC;QAC3D,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,KAAK,AAAC;QAClD,MAAM,KAAI,GAAG,gBAAgB,CAAC,IAAI,AAAC;QAEnC,IAAI,CAAC,YAAY,EACf,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAG5D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,IAAI,iBAAiB,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,gBAAgB,GAC5C,gBAAgB,CAAC,gBAAgB,CAAC;QAEpC,MAAM,WAAW,GAAG,gBAAgB,CAAC,gBAAgB,KAAK,IAAI,AAAC;QAE/D,IAAI,CAAC,WAAW,EACd;YAAA,IAAI,gBAAgB,CAAC,gBAAgB,EACnC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC;SAChE,AACF;QAED,MAAM,aAAa,GAAG,IAAM;YAC1B,IAAI,UAAU,EACZ,OAAO;YAGT,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,AAAC;YAClE,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,AAAC;YAErE,IAAI,cAAc,IAAI,eAAe,EACnC,cAAc,CAAC,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;SAE9D,AAAC;QAEF,aAAa,EAAE,CAAC;QAEhB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,CACpC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,CACrC,CAAC;QAEF,IAAI,WAAU,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAU,CAAC,MAAM,CAAC,CAAC;YACnD,CAAA,GAAA,wCAAI,CAAA,CAAC,aAAa,CAAC,WAAU,CAAC,MAAM,CAAC,CAAC;SACvC;QACD,CAAA,GAAA,wCAAI,CAAA,CAAC,aAAa,CAAC,KAAI,CAAC,CAAC;QAEzB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE7B,QAAQ,EAAE,CAAC;KACZ;IAED,AAAQ,oBAAoB,CAAC,UAAE,MAAM,CAAA,QAAE,IAAI,CAAA,EAAgC,EAAE;QAC3E,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,gBAAgB,AAAC;QAC5D,MAAM,CAAC,KAAK,CAAC,IAAI,GACf,AAAC,YAAY,IACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,IACtE,IAAI,CAAC;KACR;CACF;;;;AFvVc;IACb,YAAmB,IAAwB,CAAE;QAC3C,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC/B,OAAO;SACR;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA,GAAA,wCAAK,CAAA,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA,GAAA,wCAAI,CAAA,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA,GAAA,wCAAU,CAAA,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACzD;IAED,AAAO,OAAO,CAAC,SACb,KAAK,CAAA,YACL,QAAQ,CAAA,QACR,IAAI,CAAA,SACJ,KAAK,CAAA,EACU,EAAgB;QAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EACjC,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,8BAA8B,GAAG,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,GAAG,GAAG;SAC1D,CAAC;QAGJ,MAAM,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC;QAEnD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EACnC,OAAO;YAAE,OAAO,EAAE,KAAK;YAAE,KAAK,EAAE,CAAC,wBAAwB,CAAC;SAAE,CAAC;QAG/D,IAAI,mBAAmB,EACrB,OAAO;YAAE,OAAO,EAAE,KAAK;YAAE,KAAK,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC;SAAE,CAAC;QAG5E,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EACzB,IAAI;YACF,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,AAAC;YAC3D,MAAM,UAAU,GAAG;gBACjB,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,UAAU;gBACjB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACnC,KAAK,EAAE,KAAK,IAAI,CAAA,GAAA,wCAAI,CAAA,CAAC,cAAc,EAAE;aACtC,AAAC;YAEF,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,AAAC;YAE9D,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAE1B,OAAO;gBAAE,OAAO,EAAE,IAAI;aAAE,CAAC;SAC1B,CAAC,OAAO,CAAC,EAAE;YACV,OAAO;gBAAE,OAAO,EAAE,KAAK;gBAAE,KAAK,EAAE,CAAC;aAAE,CAAC;SACrC;QAGH,MAAM,WAAU,GAAG;kBACjB,IAAI;YACJ,KAAK,EAAE,KAAK,IAAI,CAAC;YACjB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YACnC,KAAK,EAAE,KAAK,IAAI,CAAA,GAAA,wCAAI,CAAA,CAAC,cAAc,EAAE;SACtC,AAAC;QAEF,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,WAAU,CAAC,AAAC;QAE7D,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACtD,OAAO;gBAAE,OAAO,EAAE,IAAI;aAAE,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,AAAC;YAC/D,IAAI,WAAW,EACb,IAAI,CAAC,UAAU,CAAC,wCAAwC,CAAC,GAAG,CAAC,CAAC;iBAE9D,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC;YAGvD,OAAO;gBAAE,OAAO,EAAE,IAAI;aAAE,CAAC;SAC1B;QAED,IAAI,CAAC,UAAU,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;QAEnD,OAAO;YAAE,OAAO,EAAE,IAAI;SAAE,CAAC;KAC1B;IAED,AAAO,QAAQ,CAAC,KAAuB,EAAgB;QACrD,MAAM,qBAAqB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,AAAC;QAEzE,IAAI,qBAAqB,EACvB,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK,EACH,iGAAiG;SACpG,CAAC;QAGJ,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAC/B,CAAC,GAAG,EAAE,IAAI,GAAK,GAAG,GAAI,CAAA,IAAI,CAAC,KAAK,IAAI,CAAC,CAAA,AAAC,EACtC,CAAC,CACF,AAAC;QAEF,IAAI,YAAY,GAAG,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,EAC5B,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,CAAC,mCAAmC,EAAE,CAAA,GAAA,wCAAK,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC;SAC5D,CAAC;QAGJ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EACpB,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,+CAA+C;SACvD,CAAC;QAGJ,IAAI,sBAAsB,GAAkC,KAAK,CAAC,GAAG,CACnE,CAAC,IAAoB,GAAK;YACxB,OAAO;gBACL,GAAG,IAAI;gBACP,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,CAAA,GAAA,wCAAI,CAAA,CAAC,cAAc,EAAE;gBAC1C,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC;gBACtB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;aACzC,CAAC;SACH,CACF,AAAC;QAEF,IAAI,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,sBAAsB,CAAC,AAAC;QAExE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAEhD,OAAO;YAAE,OAAO,EAAE,IAAI;SAAE,CAAC;KAC1B;IAED,AAAO,UAAU,CAAC,IAAY,EAAE,QAAqB,EAAQ;QAC3D,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC7D;IAKD,AAAQ,WAAW,GAAG,KAAK,CAAC;IAE5B,AAAQ,UAAU,CAChB,QAAkC,EACmB;QACrD,OAAO,AAAC,CAAA,CAAC,KAAa,EAAE,OAA0B,GAAK;YACrD,IAAI,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,AAAC;YAEnC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAElD,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC7B,CAAA,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACf;IAED,AAAQ,UAAU,CAAC,QAAqB,EAAc;QACpD,OAAO,CAAA,WAAY;YACjB,QAAQ,IAAI,QAAQ,EAAE,CAAC;SACxB,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACd;CACF;AAQD,MAAM,CAAC,gBAAgB,GAAG,wCAAgB,CAAC","sources":["src/index.ts","src/model.ts","src/controller.ts","src/view/view.ts","src/view/makeMoveable.ts"],"sourcesContent":["import Model from './model';\nimport Controller, {\n  InternalLineInitParams,\n  LineInitParams,\n} from './controller';\nimport View from './view/view';\n\nexport type SuccessResult<T> = { success: true; payload?: T };\n\nexport type ErrorResult = { success: false; error: string };\n\nexport type Result<T> = SuccessResult<T> | ErrorResult;\n\nexport default class PercentageSlider {\n  public constructor(node: HTMLElement | null) {\n    if (!node) {\n      console.warn('Node is empty!');\n      return;\n    }\n\n    this.model = new Model();\n    this.view = new View(node);\n    this.controller = new Controller(this.model, this.view);\n  }\n\n  public addLine({\n    value,\n    onChange,\n    name,\n    color,\n  }: LineInitParams): Result<void> {\n    if (!this.model.isValidValue(value)) {\n      return {\n        success: false,\n        error: \"Total can't be greater than \" + Model.TOTAL + '.',\n      };\n    }\n\n    const hasNameAlreadyTaken = this.model.lines[name];\n\n    if (!name || name.trim().length === 0) {\n      return { success: false, error: `The name can't be empty.` };\n    }\n\n    if (hasNameAlreadyTaken) {\n      return { success: false, error: `The name '${name}' is already in use.` };\n    }\n\n    if (this.model.hasNoLines()) {\n      try {\n        const validValue = parseInt(`${value}`, 10) || Model.TOTAL;\n        const lineParams = {\n          name: name,\n          value: validValue,\n          onChange: this.mkOnChange(onChange),\n          color: color || View.getRandomColor(),\n        };\n\n        const lineData = this.controller.createSingleLine(lineParams);\n\n        this.view.appendElement(lineData.line);\n\n        if (value && !isNaN(value)) {\n          this._wasChanged = true;\n        }\n        return { success: true };\n      } catch (e) {\n        return { success: false, error: e };\n      }\n    }\n\n    const lineParams = {\n      name,\n      value: value || 0,\n      onChange: this.mkOnChange(onChange),\n      color: color || View.getRandomColor(),\n    };\n\n    const lwh = this.controller.createLineWithHandle(lineParams);\n\n    if (value && !isNaN(value)) {\n      this._wasChanged = true;\n      this.controller.addLineWithHandleToSlider(value, lwh);\n      return { success: true };\n    }\n\n    if (this._wasChanged) {\n      const noSpaceLeft = this.model.getSumOfLines() === Model.TOTAL;\n      if (noSpaceLeft) {\n        this.controller.addLineWithHandleToSliderBySplitLastLine(lwh);\n      } else {\n        this.controller.addLineWithHandleToSliderGreedy(lwh);\n      }\n\n      return { success: true };\n    }\n\n    this.controller.addLineWithHandleToSliderAuto(lwh);\n\n    return { success: true };\n  }\n\n  public addLines(lines: LineInitParams[]): Result<void> {\n    const someLinesAlreadyAdded = Object.keys(this.model.lines).length !== 0;\n\n    if (someLinesAlreadyAdded) {\n      return {\n        success: false,\n        error:\n          'Lines can not be added to already initialized slider. Instead, you can add lines one at a time.',\n      };\n    }\n\n    const linesDataSum = lines.reduce(\n      (acc, curr) => acc + (curr.value || 0),\n      0\n    );\n\n    if (linesDataSum > Model.TOTAL) {\n      return {\n        success: false,\n        error: `Sum of lines can not be great than ${Model.TOTAL}.`,\n      };\n    }\n\n    if (lines.length === 0) {\n      return {\n        success: false,\n        error: 'Cannot initialize strips with an empty array.',\n      };\n    }\n\n    let internalLineInitParams: Array<InternalLineInitParams> = lines.map(\n      (line: LineInitParams) => {\n        return {\n          ...line,\n          color: line.color || View.getRandomColor(),\n          value: line.value || 0,\n          onChange: this.mkOnChange(line.onChange),\n        };\n      }\n    );\n\n    var internalLines = this.controller.createLines(internalLineInitParams);\n\n    this.controller.addLinesToSlider(internalLines);\n\n    return { success: true };\n  }\n\n  public removeLine(name: string, onRemove?: () => void): void {\n    this.controller.removeLine(name, this.mkOnRemove(onRemove));\n  }\n\n  private model: Model;\n  private view: View;\n  private controller: Controller;\n  private _wasChanged = false;\n\n  private mkOnChange(\n    onChange?: (value: number) => void\n  ): (value: number, options: { auto: boolean }) => void {\n    return ((value: number, options: { auto: boolean }) => {\n      var auto = options && options.auto;\n\n      this._wasChanged = auto ? this._wasChanged : true;\n\n      onChange && onChange(value);\n    }).bind(this);\n  }\n\n  private mkOnRemove(onRemove?: () => void): () => void {\n    return function () {\n      onRemove && onRemove();\n    }.bind(this);\n  }\n}\n\ndeclare global {\n  interface Window {\n    PercentageSlider: typeof PercentageSlider;\n  }\n}\n\nwindow.PercentageSlider = PercentageSlider;\n","export interface LineModel {\n  name: string;\n  value: number;\n}\n\nexport default class Model {\n  public lines: Record<string, LineModel> = {};\n\n  static readonly TOTAL: number = 100;\n\n  // Gets the same cube of 100 by the given number of elements. For example\n  // getEqualParts(2) -> [50, 50]\n  // getEqualParts(3) -> [33, 33, 33]\n  // getEqualParts(4) -> [25, 25, 25, 250\n  // and so on..\n  public getEqualParts(n: number): number[] {\n    const values = [];\n    let total = Model.TOTAL;\n\n    while (total > 0 && n > 0) {\n      let a = total / n;\n\n      if (a % 2 == 0) {\n        a = Math.floor(total / n);\n      } else {\n        a = Math.ceil(total / n);\n      }\n\n      total -= a;\n      n--;\n      values.push(a);\n    }\n\n    return values;\n  }\n\n  public getSumOfLines(): number {\n    return Object.keys(this.lines).reduce((acc, line) => {\n      const currValue = this.lines[line].value;\n      return isNaN(currValue) ? acc : acc + currValue;\n    }, 0);\n  }\n\n  public isValidValue(value?: number): boolean {\n    var value = value && isNaN(value) ? 0 : value;\n    return this.getSumOfLines() + (value || 0) <= Model.TOTAL;\n  }\n\n  public hasNoLines(): boolean {\n    return Object.keys(this.lines).length === 0;\n  }\n}\n","import Model, { LineModel } from './model';\nimport View, { Handle, LineView } from './view/view';\n\ninterface LineWithHandle {\n  name: string;\n  line: HTMLElement;\n  handle: HTMLElement;\n}\n\ninterface SimpleLine {\n  line: HTMLElement;\n  name: string;\n  value: number;\n}\n\nexport interface LineInitParams {\n  name: string;\n  value: number;\n  color: string;\n  onChange: (value: number) => void;\n}\n\ntype InternalOnChange = (ids: number, params: { auto: boolean }) => void;\n\ntype Lines = [SimpleLine, ...Array<LineWithHandle>];\n\nexport type InternalLineInitParams = Required<\n  Omit<LineInitParams, 'onChange'>\n> & { onChange: InternalOnChange };\n\nexport default class Controller {\n  public constructor(private model: Model, private view: View) {\n    this.model = model;\n    this.view = view;\n    this.activateDragHandleListener();\n  }\n\n  public createSingleLine(params: InternalLineInitParams): SimpleLine {\n    const { name, value, onChange, color } = params;\n\n    const line = this.view.createLine(name, color);\n    const lineView: LineView = {\n      name: name,\n      line: line,\n      onChange: onChange,\n      nextLineView: null,\n      previousLineView: null,\n    };\n\n    const lineModel: LineModel = {\n      name: name,\n      value: value,\n    };\n\n    this.view.lines[name] = lineView;\n    this.view.setLineWidth(name, value);\n\n    this.model.lines[name] = lineModel;\n\n    onChange(value, { auto: value === Model.TOTAL });\n\n    return {\n      line,\n      name: name,\n      value: value,\n    };\n  }\n\n  public createLineWithHandle(params: InternalLineInitParams): LineWithHandle {\n    const { name, value, onChange, color } = params;\n    const line = this.view.createLine(name, color);\n    const namePrev = this.view.getLastLineName();\n\n    this.model.lines[name] = {\n      name: name,\n      value: value,\n    };\n\n    this.view.lines[name] = {\n      name: name,\n      line: line,\n      onChange: onChange,\n      previousLineView: this.view.lines[namePrev],\n      nextLineView: null,\n    };\n\n    this.view.lines[namePrev].nextLineView = this.view.lines[name];\n\n    const handle = this.view.createHandle();\n    this.view.handles.set(handle, {\n      handle: handle,\n      previousLineName: namePrev,\n      nextLineName: name,\n    });\n\n    return { name, line, handle };\n  }\n\n  public createLines(params: InternalLineInitParams[]): Lines {\n    const singleLine = this.createSingleLine(params[0]);\n    const restLinesWithHandles = params\n      .slice(1)\n      .map(this.createLineWithHandle, this);\n\n    return [singleLine, ...restLinesWithHandles];\n  }\n\n  public divideSliderIntoEqualParts(): void {\n    const names = Object.keys(this.model.lines);\n    const amount = names.length;\n    const diffs = this.model.getEqualParts(amount);\n\n    names.forEach(function (this: Controller, name, index) {\n      this.model.lines[name].value = diffs[index];\n      const onChange = this.view.lines[name].onChange;\n      onChange(diffs[index], { auto: true });\n\n      const aggregate = diffs\n        .slice(0, index + 1)\n        .reduce((acc, curr) => acc + curr, 0);\n      this.view.setLineWidth(name, aggregate);\n    }, this);\n\n    this.view.handles.forEach(function (this: Controller, handleData: Handle) {\n      const partialHandleData = {\n        handle: handleData.handle,\n        name: handleData.nextLineName,\n      };\n\n      this.updateHandlePosition(partialHandleData);\n    }, this);\n  }\n\n  public addLineWithHandleToSlider(value: number, lwh: LineWithHandle): void {\n    const aggregation = Object.keys(this.model.lines).reduce((acc, curr) => {\n      return acc + this.model.lines[curr].value;\n    }, 0);\n\n    this.view.setLineWidth(lwh.name, aggregation);\n    this.view.appendElement(lwh.handle);\n    this.updateHandlePosition(lwh);\n    this.view.appendElement(lwh.line);\n\n    this.view.lines[lwh.name].onChange(value);\n  }\n\n  public addLinesToSlider(lines: Lines): void {\n    var singleLine = lines[0];\n    this.view.appendElement(singleLine.line);\n    (lines.slice(1) as LineWithHandle[]).forEach((lwh, index, arr) => {\n      const lineName = lwh.name;\n      const value = this.model.lines[lineName].value;\n      const prevName = arr[index - 1]?.name || singleLine.name;\n      const prevLineWidth = this.view.getLineWidthInPercent(prevName);\n\n      this.view.setLineWidth(lwh.name, value + prevLineWidth);\n      this.view.appendElement(lwh.handle);\n      this.updateHandlePosition(lwh);\n      this.view.appendElement(lwh.line);\n\n      this.view.lines[lineName].onChange(value);\n    });\n  }\n\n  public addLineWithHandleToSliderAuto(lwh: LineWithHandle): void {\n    this.divideSliderIntoEqualParts();\n    this.view.appendElement(lwh.handle);\n    this.view.appendElement(lwh.line);\n  }\n\n  public addLineWithHandleToSliderGreedy(lwh: LineWithHandle): void {\n    const emptySpace = Model.TOTAL - this.model.getSumOfLines();\n    this.model.lines[lwh.name].value = emptySpace;\n    this.view.setLineWidth(lwh.name, Model.TOTAL);\n    this.view.appendElement(lwh.handle);\n    this.updateHandlePosition(lwh);\n    this.view.appendElement(lwh.line);\n\n    this.view.lines[lwh.name].onChange(emptySpace, { auto: true });\n  }\n\n  public addLineWithHandleToSliderBySplitLastLine(lwh: LineWithHandle): void {\n    const prevLineView = this.view.lines[lwh.name].previousLineView;\n    const prevLineValue =\n      (prevLineView && this.model.lines[prevLineView.name].value) || 0;\n\n    const prevDividedInto2 = prevLineValue / 2;\n    const newPrevLineValue = Math.floor(prevDividedInto2);\n    const newLineValue = Math.ceil(prevDividedInto2);\n\n    if (prevLineView && prevLineView.line) {\n      prevLineView.line.style.width =\n        parseInt(prevLineView.line.style.width || '0') - newLineValue + '%';\n    }\n\n    this.model.lines[lwh.name].value = newLineValue;\n\n    if (prevLineView) {\n      this.model.lines[prevLineView.name].value = newPrevLineValue;\n    }\n\n    this.addLineWithHandleToSlider(newLineValue, lwh);\n\n    this.view.lines[lwh.name].onChange(newLineValue);\n    prevLineView &&\n      this.view.lines[prevLineView.name].onChange(newPrevLineValue);\n  }\n\n  public activateDragHandleListener(): void {\n    const updateValues = (\n      handle: HTMLElement,\n      oldHandleLeft: number,\n      newHandleLeft: number\n    ) => {\n      const handleData = this.view.getHandleData(handle);\n\n      const previousName = handleData.previousLineName;\n      const nextName = handleData.nextLineName;\n\n      // view\n      this.view.setLineWidth(previousName, newHandleLeft);\n\n      // model\n      const diff = oldHandleLeft - newHandleLeft;\n      this.model.lines[previousName].value -= diff;\n      this.model.lines[nextName].value += diff;\n\n      const fromOnChange = this.view.lines[previousName].onChange;\n      const toOnChange = this.view.lines[nextName].onChange;\n\n      fromOnChange(this.model.lines[previousName].value);\n      toOnChange(this.model.lines[nextName].value);\n    };\n\n    this.view.makeHandleMoveable(updateValues);\n  }\n\n  public removeLine(name: string, onRemove: () => void): void {\n    const removingLineModel = this.model.lines[name];\n    const removingLineView = this.view.lines[name];\n\n    if (!removingLineModel || !removingLineView) {\n      console.warn('Line ' + name + ' not found');\n      return;\n    }\n\n    const isSingleLine = Object.keys(this.model.lines).length === 1;\n\n    if (isSingleLine) {\n      this.model.lines = {};\n      this.view.lines = {};\n      this.view.handles = new Map();\n\n      View.removeElement(removingLineView.line);\n\n      onRemove();\n\n      return;\n    }\n\n    const isLastLine = this.view.getLastLineName() === name;\n\n    if (isLastLine) {\n      const handleData = this.view.findHandleDataByToLineName(name);\n      const line = removingLineView.line;\n      const prevLineName = handleData && handleData.previousLineName;\n      const valueTo = removingLineModel.value;\n\n      if (!prevLineName) {\n        throw new Error('Unexpected behavior during remove last line');\n      }\n\n      this.view.lines[prevLineName].nextLineView = null;\n      this.model.lines[prevLineName].value += valueTo;\n\n      this.view.setLineWidth(prevLineName, Model.TOTAL);\n      this.view.lines[prevLineName].onChange(\n        this.model.lines[prevLineName].value,\n        { auto: true }\n      );\n\n      if (handleData) {\n        View.removeElement(handleData.handle);\n        this.view.removePreviousHandles(handleData.handle);\n      }\n\n      View.removeElement(line);\n\n      delete this.model.lines[name];\n      delete this.view.lines[name];\n\n      onRemove();\n\n      return;\n    }\n\n    // Generic case\n    const handleData = this.view.findHandleDataByFromLineName(name);\n    const nextLineName = handleData && handleData.nextLineName;\n    const removingLineValue = removingLineModel.value;\n    const line = removingLineView.line;\n\n    if (!nextLineName) {\n      throw new Error('Unexpected behavior during remove line');\n    }\n\n    this.model.lines[nextLineName].value += removingLineValue;\n    this.view.lines[nextLineName].previousLineView =\n      removingLineView.previousLineView;\n\n    const isFirstLine = removingLineView.previousLineView === null;\n\n    if (!isFirstLine) {\n      if (removingLineView.previousLineView) {\n        removingLineView.previousLineView.name = removingLineView.name;\n      }\n    }\n\n    const updateHandles = () => {\n      if (isLastLine) {\n        return;\n      }\n\n      const leftHandleData = this.view.findHandleDataByToLineName(name);\n      const rightHandleData = this.view.findHandleDataByFromLineName(name);\n\n      if (leftHandleData && rightHandleData) {\n        leftHandleData.nextLineName = rightHandleData.nextLineName;\n      }\n    };\n\n    updateHandles();\n\n    this.view.lines[nextLineName].onChange(\n      this.model.lines[nextLineName].value\n    );\n\n    if (handleData) {\n      this.view.removePreviousHandles(handleData.handle);\n      View.removeElement(handleData.handle);\n    }\n    View.removeElement(line);\n\n    delete this.model.lines[name];\n    delete this.view.lines[name];\n\n    onRemove();\n  }\n\n  private updateHandlePosition({ handle, name }: Omit<LineWithHandle, 'line'>) {\n    const prevLineView = this.view.lines[name].previousLineView;\n    handle.style.left =\n      (prevLineView &&\n        Math.round(this.view.getLineWidthInPercent(prevLineView.name)) + '%') ||\n      '1%';\n  }\n}\n","import { MakeHandleMoveable } from './makeMoveable';\nimport './styles.scss';\n\nexport interface Handle {\n  handle: HTMLElement;\n  previousLineName: string;\n  nextLineName: string;\n}\n\nexport interface LineView {\n  name: string;\n  line: HTMLElement;\n  onChange: OnChange;\n  nextLineView: null | LineView;\n  previousLineView: null | LineView;\n}\n\nexport type LineViewMap = {\n  [name: string]: LineView;\n};\n\nexport type OnChange = (ids: number, params?: { auto: boolean }) => void;\n\nexport default class View {\n  public constructor(node: HTMLElement) {\n    this.node = node;\n    this.slider = this.createSlider();\n    this.lines = {};\n    this.handles = new Map();\n    this.sliderMovement = new MakeHandleMoveable(this);\n\n    this.node.appendChild(this.slider);\n  }\n\n  public sliderMovement: MakeHandleMoveable;\n  public node: HTMLElement;\n  public slider: HTMLElement;\n  public lines: LineViewMap;\n  public handles: Map<HTMLElement, Handle>;\n\n  public removePreviousHandles(handle: HTMLElement): void {\n    this.handles.delete(handle);\n  }\n\n  public createLine(name: string, color: string): HTMLElement {\n    const line = document.createElement('div');\n\n    line.setAttribute('name', name);\n    line.classList.add('line');\n    line.style.background = color;\n\n    return line;\n  }\n\n  public createHandle(): HTMLElement {\n    const handle = document.createElement('div');\n\n    handle.classList.add('handle');\n    handle.setAttribute('data-handle', 'handle');\n\n    return handle;\n  }\n\n  public appendElement(el: HTMLElement): void {\n    this.slider.insertBefore(el, this.slider.firstChild);\n  }\n\n  public setLineWidth(name: string, value: number): void {\n    this.lines[name].line.style.width = `${value}%`;\n    this.lines[name].line.setAttribute('data-value', String(value));\n  }\n\n  public getLastLineName(): string {\n    const namesPrev = Object.keys(this.lines).filter(\n      (lineView) => this.lines[lineView].nextLineView === null,\n      this\n    );\n\n    if (namesPrev.length !== 1) {\n      throw new Error('Error during try to find last line name');\n    }\n\n    return namesPrev[0];\n  }\n\n  public getHandleData(handle: HTMLElement): Handle {\n    const handleData = this.handles.get(handle);\n\n    if (!handleData) {\n      throw new Error('Error when trying to find handle');\n    }\n\n    return handleData;\n  }\n\n  public getLineWidthInPercent(name: string): number {\n    const particularLineWidth = this.lines[name].line.offsetWidth;\n    return this.convertToPercent(particularLineWidth);\n  }\n\n  public convertToPercent(value: number): number {\n    const totalPercent = this.slider.offsetWidth;\n    return (value * 100) / totalPercent;\n  }\n\n  public findHandleDataByToLineName(name: string): null | Handle {\n    const r = Array.from(this.handles.values()).find(\n      (c) => c.nextLineName === name\n    );\n\n    return r ? r : null;\n  }\n\n  public findHandleDataByFromLineName(name: string): null | Handle {\n    const r = Array.from(this.handles.values()).find(\n      (c) => c.previousLineName === name\n    );\n\n    return r ? r : null;\n  }\n\n  public makeHandleMoveable(\n    updateValues: (handle: HTMLElement, a: number, b: number) => void\n  ): void {\n    this.sliderMovement.makeHandleMoveable(updateValues);\n  }\n\n  private createSlider(): HTMLElement {\n    var slider = document.createElement('div');\n    slider.classList.add('slider');\n    slider.setAttribute('name', 'slider_' + View.sliderId);\n    View.sliderId = View.sliderId++;\n    return slider;\n  }\n\n  public static sliderId: number = 0;\n\n  public static getRandomColor(): string {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  public static removeElement(el: HTMLElement): void {\n    if (!el.parentNode) {\n      return;\n    }\n\n    el.parentNode.removeChild(el);\n  }\n}\n","import View, { Handle, LineViewMap } from './view';\n\ntype Platform = 'mobile' | 'desktop';\n\ninterface PlatformDependetData<E extends Platform> {\n  eventName: E extends 'mobile' ? 'ontouchstart' : 'onmousedown';\n  getClientX: (event: E extends 'mobile' ? TouchEvent : MouseEvent) => number;\n  move: {\n    start: E extends 'mobile' ? 'touchmove' : 'mousemove';\n    finish: E extends 'mobile' ? 'touchend' : 'mouseup';\n  };\n}\n\ninterface Env {\n  mobile: PlatformDependetData<'mobile'>;\n  desktop: PlatformDependetData<'desktop'>;\n}\n\nconst environment: Env = {\n  mobile: {\n    eventName: 'ontouchstart',\n    getClientX: (event) => event.touches[0].clientX,\n    move: { start: 'touchmove', finish: 'touchend' },\n  },\n  desktop: {\n    eventName: 'onmousedown',\n    getClientX: (event) => event.clientX,\n    move: { start: 'mousemove', finish: 'mouseup' },\n  },\n};\n\nexport class MakeHandleMoveable {\n  constructor(view: View) {\n    const platform: Platform =\n      typeof window.orientation !== 'undefined' ? 'mobile' : 'desktop';\n\n    this.enviroment = environment[platform];\n    this.view = view;\n  }\n\n  public makeHandleMoveable(\n    updateValues: (handle: HTMLElement, a: number, b: number) => void\n  ): void {\n    this.view.slider[this.enviroment.eventName] = (event) => {\n      const isHtmlElement = event.target instanceof HTMLElement;\n      const isHandle =\n        isHtmlElement &&\n        (event.target.closest('[data-handle]') as HTMLElement | undefined)\n          ?.dataset?.handle === 'handle';\n\n      if (!isHandle) {\n        return;\n      }\n\n      let handle = event.target;\n\n      const handleData = this.view.getHandleData(handle);\n\n      const prevLineValue =\n        handleData?.previousLineName &&\n        this.view.lines[handleData?.previousLineName].line.dataset.value;\n      const nextLineValue =\n        handleData?.nextLineName &&\n        this.view.lines[handleData?.nextLineName].line.dataset.value;\n\n      if (prevLineValue === undefined || nextLineValue === undefined) {\n        console.error(\n          'Trying to move a handle that is not bounded by two lines.'\n        );\n        return;\n      }\n\n      const isHandleLocked = prevLineValue === '0' && nextLineValue === '0';\n\n      const params: Omit<ProccessMovementParams, 'handle'> = {\n        event,\n        updateValues,\n        view: this.view,\n        enviroment: this.enviroment,\n      };\n\n      if (isHandleLocked) {\n        handle = findHandleThatCanBeMoved({\n          handle: handle,\n          handles: this.view.handles,\n          lines: this.view.lines,\n        });\n        processMovement({ ...params, handle });\n      } else {\n        processMovement({ ...params, handle });\n      }\n    };\n  }\n\n  private view: View;\n\n  private enviroment: Env[keyof Env];\n}\n\ninterface ProccessMovementParams {\n  event: TouchEvent | MouseEvent;\n  handle: HTMLElement;\n  view: View;\n  enviroment: Env[keyof Env];\n  updateValues: (handle: HTMLElement, a: number, b: number) => void;\n}\n\nfunction processMovement(params: ProccessMovementParams): void {\n  const { event, view, enviroment, updateValues } = params;\n\n  let handle = params.handle;\n\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n\n  const sliderWidthStr = view.slider.firstChild\n    ? getComputedStyle(view.slider.firstChild as Element).width\n    : '0';\n  const longestLineWidth = parseFloat(sliderWidthStr || '');\n  const longestLinePercent = Math.round(\n    view.convertToPercent(longestLineWidth)\n  );\n\n  const isPartialFilledSlider = longestLinePercent !== 100;\n  const shiftX =\n    enviroment.getClientX(event as TouchEvent & MouseEvent) -\n    handle.getBoundingClientRect().left;\n\n  const onMove = (event: TouchEvent | MouseEvent) => {\n    let newLeft =\n      enviroment.getClientX(event as TouchEvent & MouseEvent) -\n      shiftX -\n      view.slider.getBoundingClientRect().left;\n\n    const considerLeftEdgeCase = () => {\n      const previousName = view.getHandleData(handle).previousLineName;\n      const prevHandleData = view.findHandleDataByToLineName(previousName);\n      const isFirstHandle = prevHandleData === null;\n\n      if (!isFirstHandle) {\n        const prevHandle = prevHandleData && prevHandleData.handle;\n        const prevHandleLeft =\n          (prevHandle &&\n            parseFloat(getComputedStyle(prevHandle).left || '0')) ||\n          0;\n\n        if (newLeft < prevHandleLeft) {\n          newLeft = prevHandleLeft;\n          handle = findHandleThatCanBeMovedToLeft({\n            handle: handle,\n            handles: view.handles,\n            lines: view.lines,\n          });\n          return;\n        }\n      }\n\n      if (newLeft < 0) {\n        newLeft = 0;\n      }\n    };\n\n    const considerRightEdgeCase = () => {\n      let rightEdgeSource = view.slider.offsetWidth;\n      let offset = view.slider.getBoundingClientRect().left;\n      newLeft += offset;\n\n      if (isPartialFilledSlider) {\n        const longestLine = view.slider.firstChild;\n        rightEdgeSource =\n          (longestLine && (longestLine as HTMLElement).offsetWidth) ||\n          rightEdgeSource;\n        offset =\n          (longestLine &&\n            (longestLine as HTMLElement).getBoundingClientRect().left) ||\n          offset;\n      }\n\n      const nextName = view.getHandleData(handle).nextLineName;\n      const nextHandleData = view.findHandleDataByFromLineName(nextName);\n      const isLastLine = nextHandleData === null;\n\n      if (!isLastLine && nextHandleData) {\n        const nextHandle = nextHandleData.handle;\n        const nextHandleLeft = parseFloat(\n          getComputedStyle(nextHandle).left || '0'\n        );\n\n        if (newLeft > nextHandleLeft + offset) {\n          newLeft = nextHandleLeft;\n          handle = findHandleThatCanBeMovedToRight({\n            handle: handle,\n            handles: view.handles,\n            lines: view.lines,\n          });\n          return;\n        }\n      }\n\n      newLeft -= offset;\n\n      const rightEdge = rightEdgeSource;\n      if (newLeft > rightEdge) {\n        newLeft = rightEdge;\n      }\n    };\n\n    considerLeftEdgeCase();\n    considerRightEdgeCase();\n\n    const currentLeft = parseFloat(getComputedStyle(handle).left || '0');\n    const newLeftInPercent = Math.round(view.convertToPercent(newLeft));\n    const oldLeftInPercent = Math.round(view.convertToPercent(currentLeft));\n\n    handle.style.left = `${newLeftInPercent}%`;\n\n    updateValues(handle, oldLeftInPercent, newLeftInPercent);\n  };\n\n  const onMoveEnd = () => {\n    document.removeEventListener(enviroment.move.finish, onMoveEnd);\n    document.removeEventListener(enviroment.move.start, onMove);\n  };\n\n  document.addEventListener(enviroment.move.start, onMove);\n  document.addEventListener(enviroment.move.finish, onMoveEnd);\n}\n\ninterface ParamsToFindNewHandle {\n  handle: HTMLElement;\n  handles: Map<HTMLElement, Handle>;\n  lines: LineViewMap;\n}\n\nfunction findHandleThatCanBeMoved({\n  handle,\n  handles,\n  lines,\n}: ParamsToFindNewHandle): HTMLElement {\n  const restHandles = Array.from(handles.entries()).filter(\n    ([iteratedHandle, { previousLineName, nextLineName }]) => {\n      const isNotCurrentHandle = iteratedHandle !== handle;\n\n      const prevVal = lines[previousLineName].line.dataset.value;\n      const nextVal = lines[nextLineName].line.dataset.value;\n\n      const hasNonZeroLine = prevVal !== '0' || nextVal !== '0';\n\n      return isNotCurrentHandle && hasNonZeroLine;\n    }\n  );\n\n  return restHandles.length > 0 ? restHandles[0][0] : handle;\n}\n\nfunction findHandleThatCanBeMovedToRight({\n  handle,\n  handles,\n  lines,\n}: ParamsToFindNewHandle): HTMLElement {\n  const handleData = handles.get(handle);\n\n  const candidateLineName =\n    handleData?.nextLineName && lines[handleData.nextLineName].name;\n\n  const restHandles = Array.from(handles.entries()).filter(\n    ([_, { nextLineName }]) => {\n      return lines[nextLineName].previousLineView?.name === candidateLineName;\n    }\n  );\n\n  return restHandles.length > 0 ? restHandles[0][0] : handle;\n}\n\nfunction findHandleThatCanBeMovedToLeft({\n  handle,\n  handles,\n  lines,\n}: ParamsToFindNewHandle): HTMLElement {\n  const handleData = handles.get(handle);\n\n  const candidateLineName =\n    handleData?.previousLineName && lines[handleData.previousLineName].name;\n\n  const restHandles = Array.from(handles.entries()).filter(\n    ([_, { previousLineName }]) => {\n      return lines[previousLineName].nextLineView?.name === candidateLineName;\n    }\n  );\n\n  return restHandles.length > 0 ? restHandles[0][0] : handle;\n}\n\nexport default MakeHandleMoveable;\n"],"names":[],"version":3,"file":"index.js.map"}